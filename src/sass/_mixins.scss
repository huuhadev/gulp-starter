/**
 * Mixins which can be shared for all sites
 */

/**
 * When using ::before and ::after you'll always need these three
	 div::after {
		@include pseudo;
		top: -1rem; left: -1rem;
		width: 1rem; height: 1rem;
	}
 */
@mixin pseudo($display: block, $pos: absolute, $content: ''){
	content: $content;
	display: $display;
	position: $pos;
}

/**
	* They're a pain as you have to set the style in all the separate formats, this sorts it for you.
	textarea {
		@include input-placeholder {
			color: $grey;
		}
	}
 */
@mixin input-placeholder {
	&.placeholder { @content; }
	&:-moz-placeholder { @content; }
	&::-moz-placeholder { @content; }
	&:-ms-input-placeholder { @content; }
	&::-webkit-input-placeholder { @content; }
}

@mixin border-radius($radius) {
	-webkit-border-radius: $radius;
	-moz-border-radius: $radius;
	border-radius: $radius;
}

@mixin screen($size) {
	$desktop: "(min-width: 1024px)";
	$tablet: "(min-width: 768px) and (max-width: 1023px)";
	$mobile: "(max-width: 767px)";
	@if $size == desktop {
		@media only screen and #{$desktop} {
			@content;
		}
	}
	@else if $size == tablet {
		@media only screen and #{$tablet} {
			@content;
		}
	}
	@else if $size == mobile {
		@media only screen and #{$mobile} {
			@content;
		}
	}
	@else {
		@media only screen and #{$size} {
			@content;
		}
	}
}

//@include center(both);
@mixin center($position) {
	position: absolute;
	
	@if $position == 'vertical' {
		top: 50%;
		-webkit-transform: translateY(-50%);
		-ms-transform: translateY(-50%);
		transform: translateY(-50%);
	}
	@else if $position == 'horizontal' {
		left: 50%;
		-webkit-transform: translateX(-50%);
		-ms-transform: translateX(-50%);
		transform: translate(-50%);
	}
	@else if $position == 'both' {
		top: 50%;
		left: 50%;
		-webkit-transform: translate(-50%, -50%);
		-ms-transform: translate(-50%, -50%);
		transform: translate(-50%, -50%);
	}
}

//@include arrow(up, 10px, #efefef);
@mixin arrow($direction: down, $size: 5px, $color: #555) {
	width: 0;
	height: 0;
	@if ($direction == left) {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-right: $size solid $color;
	}
	@else if ($direction == right) {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-left: $size solid $color;
	}
	@else if ($direction == down) {
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-top: $size solid $color;
	}
	@else {
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-bottom: $size solid $color;
	}
}

@mixin text-shorten {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

@mixin clearfix {
	&:after {
		content: "";
		display: table;
		clear: both;
	}
}

@mixin gradient($start-color, $end-color, $orientation) {
	background: $start-color;
	@if $orientation == 'vertical' {
		background: -webkit-linear-gradient(top, $start-color, $end-color);
		background: linear-gradient(to bottom, $start-color, $end-color);
	} @else if $orientation == 'horizontal' {
		background: -webkit-linear-gradient(left, $start-color, $end-color);
		background: linear-gradient(to right, $start-color, $end-color);
	} @else {
		background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
		background: radial-gradient(ellipse at center, $start-color, $end-color);
	}
}
